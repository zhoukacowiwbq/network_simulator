compile the program as :
==========================

gcc -g -c gluethread/glthread.c -o gluethread/glthread.o
gcc -g -c WheelTimer.c -o WheelTimer.o
gcc -g -c main.c -o main.o
gcc -g main.o WheelTimer.o gluethread/glthread.o -o exe -lpthread

# now run the executable as ./exe

Use main.c file as a reference to see how to use Wheeltimer library.

Complete course on Wheeltimer internal designing and implementation is here : 
    https://www.udemy.com/course/wheeltimers/?referralCode=0A869289160EFB73389A

All courses by me at one place : https://csepracticals.wixsite.com/csepracticals


APIs : 

1. Create a new WheelTimer object.
Arg : wheel_size : Size of wheeltimer. For example, like 60 slots per minute in the wall clock has size 60. Most commonly used value is 60.
Arg : clock_tic_interval : Most commpnly used value is 1(in sec). 
By supplying the arg wheel_size = 60, clock_tic_interval = 1, the WheelTimer emulates the wall clock.

Return : Pointer to Wheel Timer. This Wheel Time is not yet running.

wheel_timer_t*
init_wheel_timer(int wheel_size, int clock_tic_interval);




2. Start the Wheel Timer in a separate thread. This API makes the WheelTimer functional and ready to schedule application events.
Arg : Pass the WheelTimer object obtained from API-1.

void
start_wheel_timer(wheel_timer_t *wt);




3. Registering an event to be fired with WheelTimer.

Arg : wt : pointer to WheelTimer object with which registration being done.
Arg : call_back : Application callback routine which WT will trigger after every t seconds. These callbacks should be following prototype :
    
    void fn_name(void *arg, int arg_size);

Arg : arg : Argument with which the call_back routine shall be invoked.
Arg : arg_size : size of argument 'arg'. WheelTimer shall make a separate copy of arg and use this to invoke an application callback.
Arg : time_interval : value of t. WT will invoke the application callback after 'time_interval' seconds elapsed since the callback was registered.
Arg : is_recursive : set to 1 if you want call_back to be invoked after every 'time_interval' seconds. set to 0 if you want WheelTimer to invoke call_back only once. When set to 0, it is application responsibility to de-register the callback using de_register_app_event() API.
Return : a pointer to WheelTimer element object which contains all the information about application callback registered with wheeltimer. Application need this object to perform further operation on this callback such as rescheduling, unscheduling.

    wheel_timer_elem_t *
    register_app_event(wheel_timer_t *wt,
        app_call_back call_back,
        void *arg,
        int arg_size,
        int time_interval,
        char is_recursive);




4. UnRegistering an event to be fired with WheelTimer.
Arg : wt : pointer to WheelTimer object with which wt_elem was registered using API 3.
Arg : wt_elem : WheelTimer which application wants to unschedule.
After invocation of this API, Wheeltimer shall not invoke the concerned application callback. Application must set a pointer pointing to 'wt_elem' to NULL straightaway(No need to free it, WheelTimer frees it instead).

    void
    de_register_app_event(wheel_timer_t *wt, wheel_timer_elem_t *wt_elem);




5. Rescheduling the already scheduled wt_elem using API 3 or this API itself. 

Arg : wt : pointer to WheelTimer object with which wt_elem was registered using API 3 Or API-5
Arg : wt_elem : WheelTimer elemenet(callback) to be rescheduled.
Arg : new_time_interval : New time interval after which the callback needs to be invoked. It doesnt change the periodicity of the wt_elem. 

    void
    wt_elem_reschedule(wheel_timer_t *wt,
        wheel_timer_elem_t *wt_elem,
        int new_time_interval);




6. Get the time in sec left for the callback to be invoked by wheeltimer.

    int
    wt_get_remaining_time(wheel_timer_t *wt,
                      wheel_timer_elem_t *wt_elem);




7. A macro which would return the number of seconds elapsed since the wheeltimer has been running.
Arg : wt_ptr : pointer to the WheelTimer object.

    WT_UPTIME(wt_ptr)




8. A utility fn that returns a pointer to the string representing the time in seconds in hsr::min::sec format. You can use this API togeth with macro given in 7.
Arg : time in seconfs.
Return : string pointer representing the time in seconds in hsr::min::sec format

    char*
    hrs_min_sec_format(unsigned int seconds);


As of now, Negative APIs (to stop, destroy the wheel timer is not implemented). Let the wheel timer stay running for forever once started. :p
